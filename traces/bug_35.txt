#35
kv_engine/engines/ep/src/checkpoint_manager.cc:227: warning: Lock Consistency Violation
  Read/Write race. Non-private method `CheckpointManager::addOpenCheckpoint` indirectly reads without synchronization from `folly::AccessSpreader<std::atomic>::cpuCache.cachedCpuUses_`. Potentially races with write in method `CheckpointManager::createNewCheckpoint`.

kv_engine/engines/ep/src/checkpoint_manager.cc:227:17: <Read trace>
225.             to_string(checkpointType));
226. 
227.     auto ckpt = std::make_unique<Checkpoint>(*this,
                     ^
228.                                              stats,
229.                                              id,

kv_engine/engines/ep/src/checkpoint_manager.cc:227:17: call to std::make_unique<f9d1aaec04c50b8e>
225.             to_string(checkpointType));
226. 
227.     auto ckpt = std::make_unique<Checkpoint>(*this,
                     ^
228.                                              stats,
229.                                              id,

/Users/dave/repos/facebook/infer/facebook-clang-plugins/clang/install/include/c++/v1/memory:2094:32: call to Checkpoint::Checkpoint
  2092. make_unique(_Args&&... __args)
  2093. {
  2094.     return unique_ptr<_Tp>(new _Tp(_VSTD::forward<_Args>(__args)...));
                                       ^
  2095. }
  2096. 

kv_engine/engines/ep/src/checkpoint.cc:79:18: call to CoreStore<folly::aligned<CoreLocalStats,16>,Opaque,Opaque>::get
    77.       checkpointType(checkpointType),
    78.       highCompletedSeqno(std::move(highCompletedSeqno)) {
    79.     auto& core = stats.coreLocal.get();
                         ^
    80.     core->memOverhead.fetch_add(sizeof(Checkpoint));
    81.     core->numCheckpoints++;

platform/include/platform/corestore.h:52:29: call to cb::stripe_for_current_cpu
      50. 
      51.     T& get() {
      52.         return coreArray.at(IndexFn(coreArray.size()));
                                      ^
      53.     }
      54. 

platform/src/sysinfo.cc:110:12: call to folly::AccessSpreader<Opaque>::cachedCurrent
        108. 
        109. size_t cb::stripe_for_current_cpu(size_t numStripes) {
        110.     return folly::AccessSpreader<std::atomic>::cachedCurrent(numStripes);
                        ^
        111. }
        112. 

build-debug-x64/tlm/deps/folly.exploded/include/folly/concurrency/CacheLocality.h:269:32: call to folly::AccessSpreader<std::atomic>::CpuCache::cpu
          267.   static size_t cachedCurrent(size_t numStripes) {
          268.     return widthAndCpuToStripe[std::min(size_t(kMaxCpus), numStripes)]
          269.                               [cpuCache.cpu()];
                                              ^
          270.   }
          271. #else

build-debug-x64/tlm/deps/folly.exploded/include/folly/concurrency/CacheLocality.h:319:11: access to `folly::AccessSpreader<std::atomic>::cpuCache.cachedCpuUses_`
            317.    public:
            318.     unsigned cpu() {
            319.       if (UNLIKELY(cachedCpuUses_-- == 0)) {
                           ^
            320.         unsigned cpu;
            321.         AccessSpreader::getcpuFunc(&cpu, nullptr, nullptr);

kv_engine/engines/ep/src/checkpoint_manager.cc:1408:5: <Write trace>
1406.     }
1407. 
1408.     addNewCheckpoint(lh);
          ^
1409.     return getOpenCheckpointId(lh);
1410. }

kv_engine/engines/ep/src/checkpoint_manager.cc:1408:5: call to CheckpointManager::addNewCheckpoint
1406.     }
1407. 
1408.     addNewCheckpoint(lh);
          ^
1409.     return getOpenCheckpointId(lh);
1410. }

kv_engine/engines/ep/src/checkpoint_manager.cc:126:5: call to CheckpointManager::addNewCheckpoint
  124.     // Use lastBySeqno + 1 as that will be the seqno of the first item belonging
  125.     // to this checkpoint
  126.     addNewCheckpoint(lh,
           ^
  127.                      lastBySeqno + 1,
  128.                      lastBySeqno + 1,

kv_engine/engines/ep/src/checkpoint_manager.cc:152:22: call to CheckpointManager::createCheckpointItem
    150.             oldOpenCkpt.getMinimumCursorSeqno(),
    151.             oldOpenCkpt.getHighSeqno());
    152.     queued_item qi = createCheckpointItem(
                              ^
    153.             oldOpenCkpt.getId(), vb.getId(), queue_op::checkpoint_end);
    154.     oldOpenCkpt.queueDirty(qi);

kv_engine/engines/ep/src/checkpoint_manager.cc:1395:24: call to Item::Item
      1393.     }
      1394. 
      1395.     queued_item qi(new Item(key, vbid, checkpoint_op, id, bySeqno));
                                   ^
      1396.     return qi;
      1397. }

kv_engine/engines/ep/src/item.cc:103:5: call to ObjectRegistry::onCreateItem
        101.     }
        102.     metaData.revSeqno = revSeq;
        103.     ObjectRegistry::onCreateItem(this);
                 ^
        104. }
        105. 

kv_engine/engines/ep/src/objectregistry.cc:84:32: call to CoreStore<folly::aligned<CoreLocalStats,16>,Opaque,Opaque>::get
          82.     EventuallyPersistentEngine* engine = th;
          83.     if (verifyEngine(engine)) {
          84.         auto& coreLocalStats = engine->getEpStats().coreLocal.get();
                                             ^
          85.         coreLocalStats->memOverhead.fetch_add(pItem->size() -
          86.                                               pItem->getValMemSize());

platform/include/platform/corestore.h:52:29: call to cb::stripe_for_current_cpu
            50. 
            51.     T& get() {
            52.         return coreArray.at(IndexFn(coreArray.size()));
                                            ^
            53.     }
            54. 

platform/src/sysinfo.cc:110:12: call to folly::AccessSpreader<Opaque>::cachedCurrent
              108. 
              109. size_t cb::stripe_for_current_cpu(size_t numStripes) {
              110.     return folly::AccessSpreader<std::atomic>::cachedCurrent(numStripes);
                              ^
              111. }
              112. 

build-debug-x64/tlm/deps/folly.exploded/include/folly/concurrency/CacheLocality.h:269:32: call to folly::AccessSpreader<std::atomic>::CpuCache::cpu
                267.   static size_t cachedCurrent(size_t numStripes) {
                268.     return widthAndCpuToStripe[std::min(size_t(kMaxCpus), numStripes)]
                269.                               [cpuCache.cpu()];
                                                    ^
                270.   }
                271. #else

build-debug-x64/tlm/deps/folly.exploded/include/folly/concurrency/CacheLocality.h:319:11: access to `folly::AccessSpreader<std::atomic>::cpuCache.cachedCpuUses_`
                  317.    public:
                  318.     unsigned cpu() {
                  319.       if (UNLIKELY(cachedCpuUses_-- == 0)) {
                                 ^
                  320.         unsigned cpu;
                  321.         AccessSpreader::getcpuFunc(&cpu, nullptr, nullptr);
