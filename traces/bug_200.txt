#200
kv_engine/engines/ep/tests/mock/mock_checkpoint_manager.h:113: warning: Lock Consistency Violation
  Read/Write race. Non-private method `MockCheckpointManager::incrCursor` indirectly reads without synchronization from `folly::AccessSpreader<std::atomic>::cpuCache.cachedCpuUses_`. Potentially races with write in method `MockCheckpointManager::forceNewCheckpoint`.

kv_engine/engines/ep/tests/mock/mock_checkpoint_manager.h:113:16: <Read trace>
111. 
112.     bool incrCursor(CheckpointCursor& cursor) {
113.         return CheckpointManager::incrCursor(cursor);
                    ^
114.     }
115. 

kv_engine/engines/ep/tests/mock/mock_checkpoint_manager.h:113:16: call to CheckpointManager::incrCursor
111. 
112.     bool incrCursor(CheckpointCursor& cursor) {
113.         return CheckpointManager::incrCursor(cursor);
                    ^
114.     }
115. 

kv_engine/engines/ep/src/checkpoint_manager.cc:1082:10: call to CheckpointManager::moveCursorToNextCheckpoint
  1080.     }
  1081. 
  1082.     if (!moveCursorToNextCheckpoint(cursor)) {
                 ^
  1083.         // There is no further checkpoint to move the cursor to, reset it to the
  1084.         // original position

kv_engine/engines/ep/src/checkpoint_manager.cc:1178:5: call to CheckpointManager::maybeScheduleDestruction
    1176.     // and may be removable now.
    1177.     // only act if the unreffed checkpoint is the oldest closed checkpoint.
    1178.     maybeScheduleDestruction(**prev);
              ^
    1179. 
    1180.     return true;

kv_engine/engines/ep/src/checkpoint_manager.cc:504:9: call to CheckpointManager::scheduleDestruction
      502.                               1 /* distance */);
      503. 
      504.         scheduleDestruction(std::move(forDestruction));
                   ^
      505.     }
      506. }

kv_engine/engines/ep/src/checkpoint_manager.cc:513:5: call to CheckpointManager::updateStatsForCheckpointRemoval
        511.     }
        512. 
        513.     updateStatsForCheckpointRemoval(toRemove);
                 ^
        514.     checkpointDisposer(std::move(toRemove), vb.getId());
        515. }

kv_engine/engines/ep/src/checkpoint_manager.cc:562:9: call to Checkpoint::detachFromManager
          560.         numMetaItemsRemoved += checkpoint->getNumMetaItems();
          561.         memoryReleased += checkpoint->getMemUsage();
          562.         checkpoint->detachFromManager();
                       ^
          563.     }
          564.     numItems.fetch_sub(numNonMetaItemsRemoved + numMetaItemsRemoved);

kv_engine/engines/ep/src/checkpoint.cc:649:13: call to CoreStore<folly::aligned<CoreLocalStats,16>,Opaque,Opaque>::get
            647.     // to decrease that we detach a checkpoint from the CM.
            648.     auto& cmMemUsage =
            649.             stats.coreLocal.get()->checkpointManagerEstimatedMemUsage;
                             ^
            650.     cmMemUsage.fetch_sub(queuedItemsMemUsage);
            651.     cmMemUsage.fetch_sub(keyIndexMemUsage);

platform/include/platform/corestore.h:52:29: call to cb::stripe_for_current_cpu
              50. 
              51.     T& get() {
              52.         return coreArray.at(IndexFn(coreArray.size()));
                                              ^
              53.     }
              54. 

platform/src/sysinfo.cc:110:12: call to folly::AccessSpreader<Opaque>::cachedCurrent
                108. 
                109. size_t cb::stripe_for_current_cpu(size_t numStripes) {
                110.     return folly::AccessSpreader<std::atomic>::cachedCurrent(numStripes);
                                ^
                111. }
                112. 

build-debug-x64/tlm/deps/folly.exploded/include/folly/concurrency/CacheLocality.h:269:32: call to folly::AccessSpreader<std::atomic>::CpuCache::cpu
                  267.   static size_t cachedCurrent(size_t numStripes) {
                  268.     return widthAndCpuToStripe[std::min(size_t(kMaxCpus), numStripes)]
                  269.                               [cpuCache.cpu()];
                                                      ^
                  270.   }
                  271. #else

build-debug-x64/tlm/deps/folly.exploded/include/folly/concurrency/CacheLocality.h:319:11: access to `folly::AccessSpreader<std::atomic>::cpuCache.cachedCpuUses_`
                    317.    public:
                    318.     unsigned cpu() {
                    319.       if (UNLIKELY(cachedCpuUses_-- == 0)) {
                                   ^
                    320.         unsigned cpu;
                    321.         AccessSpreader::getcpuFunc(&cpu, nullptr, nullptr);

kv_engine/engines/ep/tests/mock/mock_checkpoint_manager.h:109:9: <Write trace>
107.     void forceNewCheckpoint() {
108.         std::lock_guard<std::mutex> lh(queueLock);
109.         checkOpenCheckpoint(lh, true);
             ^
110.     }
111. 

kv_engine/engines/ep/tests/mock/mock_checkpoint_manager.h:109:9: call to CheckpointManager::checkOpenCheckpoint
107.     void forceNewCheckpoint() {
108.         std::lock_guard<std::mutex> lh(queueLock);
109.         checkOpenCheckpoint(lh, true);
             ^
110.     }
111. 

kv_engine/engines/ep/src/checkpoint_manager.cc:1217:9: call to CheckpointManager::addNewCheckpoint
  1215. 
  1216.     if (forceCreation || numItemsTrigger || timeTrigger || memTrigger) {
  1217.         addNewCheckpoint(lh);
                ^
  1218.     }
  1219. }

kv_engine/engines/ep/src/checkpoint_manager.cc:126:5: call to CheckpointManager::addNewCheckpoint
    124.     // Use lastBySeqno + 1 as that will be the seqno of the first item belonging
    125.     // to this checkpoint
    126.     addNewCheckpoint(lh,
             ^
    127.                      lastBySeqno + 1,
    128.                      lastBySeqno + 1,

kv_engine/engines/ep/src/checkpoint_manager.cc:152:22: call to CheckpointManager::createCheckpointItem
      150.             oldOpenCkpt.getMinimumCursorSeqno(),
      151.             oldOpenCkpt.getHighSeqno());
      152.     queued_item qi = createCheckpointItem(
                                ^
      153.             oldOpenCkpt.getId(), vb.getId(), queue_op::checkpoint_end);
      154.     oldOpenCkpt.queueDirty(qi);

kv_engine/engines/ep/src/checkpoint_manager.cc:1395:24: call to Item::Item
        1393.     }
        1394. 
        1395.     queued_item qi(new Item(key, vbid, checkpoint_op, id, bySeqno));
                                     ^
        1396.     return qi;
        1397. }

kv_engine/engines/ep/src/item.cc:103:5: call to ObjectRegistry::onCreateItem
          101.     }
          102.     metaData.revSeqno = revSeq;
          103.     ObjectRegistry::onCreateItem(this);
                   ^
          104. }
          105. 

kv_engine/engines/ep/src/objectregistry.cc:84:32: call to CoreStore<folly::aligned<CoreLocalStats,16>,Opaque,Opaque>::get
            82.     EventuallyPersistentEngine* engine = th;
            83.     if (verifyEngine(engine)) {
            84.         auto& coreLocalStats = engine->getEpStats().coreLocal.get();
                                               ^
            85.         coreLocalStats->memOverhead.fetch_add(pItem->size() -
            86.                                               pItem->getValMemSize());

platform/include/platform/corestore.h:52:29: call to cb::stripe_for_current_cpu
              50. 
              51.     T& get() {
              52.         return coreArray.at(IndexFn(coreArray.size()));
                                              ^
              53.     }
              54. 

platform/src/sysinfo.cc:110:12: call to folly::AccessSpreader<Opaque>::cachedCurrent
                108. 
                109. size_t cb::stripe_for_current_cpu(size_t numStripes) {
                110.     return folly::AccessSpreader<std::atomic>::cachedCurrent(numStripes);
                                ^
                111. }
                112. 

build-debug-x64/tlm/deps/folly.exploded/include/folly/concurrency/CacheLocality.h:269:32: call to folly::AccessSpreader<std::atomic>::CpuCache::cpu
                  267.   static size_t cachedCurrent(size_t numStripes) {
                  268.     return widthAndCpuToStripe[std::min(size_t(kMaxCpus), numStripes)]
                  269.                               [cpuCache.cpu()];
                                                      ^
                  270.   }
                  271. #else

build-debug-x64/tlm/deps/folly.exploded/include/folly/concurrency/CacheLocality.h:319:11: access to `folly::AccessSpreader<std::atomic>::cpuCache.cachedCpuUses_`
                    317.    public:
                    318.     unsigned cpu() {
                    319.       if (UNLIKELY(cachedCpuUses_-- == 0)) {
                                   ^
                    320.         unsigned cpu;
                    321.         AccessSpreader::getcpuFunc(&cpu, nullptr, nullptr);
