#83
kv_engine/engines/ep/src/dcp/consumer.cc:1562: warning: Lock Consistency Violation
  Read/Write race. Non-private method `DcpConsumer::supportHifiMFU` reads without synchronization from `this->opaqueCounter`. Potentially races with write in method `DcpConsumer::addStream`.

kv_engine/engines/ep/src/dcp/consumer.cc:1562:27: <Read trace>
1560.     if (pendingSupportHifiMFU) {
1561.         cb::engine_errc ret;
1562.         uint32_t opaque = ++opaqueCounter;
                                ^
1563.         std::string val("true");
1564.         ret = producers.control(opaque, hifiMFUCtrlMsg, val);

kv_engine/engines/ep/src/dcp/consumer.cc:1562:27: access to `this->opaqueCounter`
1560.     if (pendingSupportHifiMFU) {
1561.         cb::engine_errc ret;
1562.         uint32_t opaque = ++opaqueCounter;
                                ^
1563.         std::string val("true");
1564.         ret = producers.control(opaque, hifiMFUCtrlMsg, val);

kv_engine/engines/ep/src/dcp/consumer.cc:285:27: <Write trace>
283.     }
284. 
285.     uint32_t new_opaque = ++opaqueCounter;
                               ^
286.     failover_entry_t entry = vb->failovers->getLatestEntry();
287.     uint64_t start_seqno = info.start;

kv_engine/engines/ep/src/dcp/consumer.cc:285:27: access to `this->opaqueCounter`
283.     }
284. 
285.     uint32_t new_opaque = ++opaqueCounter;
                               ^
286.     failover_entry_t entry = vb->failovers->getLatestEntry();
287.     uint64_t start_seqno = info.start;
