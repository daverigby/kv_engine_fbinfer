#77
kv_engine/engines/ep/src/dcp/consumer.cc:1301: warning: Lock Consistency Violation
  Read/Write race. Non-private method `DcpConsumer::notifyVbucketReady` reads without synchronization from `this->processorTaskId`. Potentially races with write in method `DcpConsumer::addStream`.

kv_engine/engines/ep/src/dcp/consumer.cc:1301:9: <Read trace>
1299.     if (vbReady.pushUnique(vbucket) &&
1300.         notifiedProcessor(true)) {
1301.         ExecutorPool::get()->wake(processorTaskId);
              ^
1302.     }
1303. }

kv_engine/engines/ep/src/dcp/consumer.cc:1301:9: access to `this->processorTaskId`
1299.     if (vbReady.pushUnique(vbucket) &&
1300.         notifiedProcessor(true)) {
1301.         ExecutorPool::get()->wake(processorTaskId);
              ^
1302.     }
1303. }

kv_engine/engines/ep/src/dcp/consumer.cc:313:9: <Write trace>
311.         ExTask task = std::make_shared<DcpConsumerTask>(
312.                 &engine_, shared_from_this(), 1);
313.         processorTaskId = ExecutorPool::get()->schedule(task);
             ^
314.     }
315. 

kv_engine/engines/ep/src/dcp/consumer.cc:313:9: access to `this->processorTaskId`
311.         ExTask task = std::make_shared<DcpConsumerTask>(
312.                 &engine_, shared_from_this(), 1);
313.         processorTaskId = ExecutorPool::get()->schedule(task);
             ^
314.     }
315. 
