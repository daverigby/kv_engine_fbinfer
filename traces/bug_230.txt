#230
kv_engine/engines/ep/tests/module_tests/checkpoint_test.cc:1933: warning: Lock Consistency Violation
  Read/Write race. Non-private method `CheckpointTest::testExpelCursorPointingToChkptStart` reads without synchronization from `this->manager`. Potentially races with write in method `CheckpointTest::testDoNotExpelIfHaveSameSeqnoAfterMutation`.

kv_engine/engines/ep/tests/module_tests/checkpoint_test.cc:1933:5: <Read trace>
1931. // the dummy item, so do not expel any items.
1932. void CheckpointTest::testExpelCursorPointingToChkptStart() {
1933.     ASSERT_EQ(1, this->manager->getNumCheckpoints()); // Single open checkpoint.
          ^
1934. 
1935.     bool isLastMutationItem{true};

kv_engine/engines/ep/tests/module_tests/checkpoint_test.cc:1933:5: access to `this->manager`
1931. // the dummy item, so do not expel any items.
1932. void CheckpointTest::testExpelCursorPointingToChkptStart() {
1933.     ASSERT_EQ(1, this->manager->getNumCheckpoints()); // Single open checkpoint.
          ^
1934. 
1935.     bool isLastMutationItem{true};

kv_engine/engines/ep/tests/module_tests/checkpoint_test.cc:2026:5: <Write trace>
2024.     config.setChkMaxItems(1);
2025.     checkpoint_config = std::make_unique<CheckpointConfig>(config);
2026.     createManager();
          ^
2027. 
2028.     // Add a meta data operation

kv_engine/engines/ep/tests/module_tests/checkpoint_test.cc:2026:5: call to CheckpointTest::createManager
2024.     config.setChkMaxItems(1);
2025.     checkpoint_config = std::make_unique<CheckpointConfig>(config);
2026.     createManager();
          ^
2027. 
2028.     // Add a meta data operation

kv_engine/engines/ep/tests/module_tests/checkpoint_test.cc:68:5: access to `this->manager`
  66. 
  67.     ASSERT_TRUE(vbucket);
  68.     manager = static_cast<MockCheckpointManager*>(
          ^
  69.             vbucket->checkpointManager.get());
  70.     ASSERT_TRUE(manager);
