#135
kv_engine/engines/ep/src/kvstore/magma-kvstore/magma-kvstore.cc:3340: warning: Lock Consistency Violation
  Read/Write race. Non-private method `MagmaKVStore::setMagmaFragmentationPercentage` indirectly reads without synchronization from `magma::ExecutionEnvRegistry::defaultEnv.first`. Potentially races with write in method `MagmaKVStore::MagmaKVStore`.

kv_engine/engines/ep/src/kvstore/magma-kvstore/magma-kvstore.cc:3340:5: <Read trace>
3338. 
3339. void MagmaKVStore::setMagmaFragmentationPercentage(size_t value) {
3340.     magma->SetFragmentationRatio(value / 100.0);
          ^
3341. }
3342. 

kv_engine/engines/ep/src/kvstore/magma-kvstore/magma-kvstore.cc:3340:5: call to MagmaMemoryTrackingProxy::SetFragmentationRatio
3338. 
3339. void MagmaKVStore::setMagmaFragmentationPercentage(size_t value) {
3340.     magma->SetFragmentationRatio(value / 100.0);
          ^
3341. }
3342. 

kv_engine/engines/ep/src/kvstore/magma-kvstore/magma-memory-tracking-proxy.cc:358:5: call to magma::Magma::SetFragmentationRatio
  356. void MagmaMemoryTrackingProxy::SetFragmentationRatio(double fragRatio) {
  357.     cb::UseArenaMallocSecondaryDomain domainGuard;
  358.     magma->SetFragmentationRatio(fragRatio);
           ^
  359. }
  360. 

magma/magma/db.cc:1107:12: call to magma::Magma::Impl::SetFragmentationRatio
    1105. 
    1106. void Magma::SetFragmentationRatio(double ratio) {
    1107.     return impl->SetFragmentationRatio(ratio);
                     ^
    1108. }
    1109. 

magma/magma/db.cc:1077:9: call to magma::Logger::Log<double>
      1075.     // Setting frag ratio < 10% might cause magma to loop
      1076.     if (fragRatio < 0.10 || fragRatio > 1.0) {
      1077.         LOG_WARNING(
                    ^
      1078.                 "Magma::SetFragmentationRatio({}) bad ratio. The "
      1079.                 "fragmentation "

magma/util/logging.h:39:17: call to magma::ExecutionEnvRegistry::GetDefaultExecutionEnv
        37.              const Args&... args) {
        38.         ExecutionEnvGuard envGuard(
        39.                 ExecutionEnvRegistry::GetDefaultExecutionEnv());
                            ^
        40.         if (!prefix.empty()) {
        41.             std::string fmtStr = "[" + prefix + "]" + fmt;

magma/util/execution_env.cc:48:12: call to std::pair<void*,int>::pair
          46. 
          47. Magma::ExecutionEnvironment ExecutionEnvRegistry::GetDefaultExecutionEnv() {
          48.     return defaultEnv;
                         ^
          49. }
          50. 

/Users/dave/repos/facebook/infer/facebook-clang-plugins/clang/install/include/c++/v1/utility:309:5: access to `magma::ExecutionEnvRegistry::defaultEnv.first`
            307. 
            308. #if !defined(_LIBCPP_CXX03_LANG)
            309.     pair(pair const&) = default;
                     ^
            310.     pair(pair&&) = default;
            311. #else

kv_engine/engines/ep/src/kvstore/magma-kvstore/magma-kvstore.cc:666:13: <Write trace>
664.     configuration.magmaCfg.UID = loggerName;
665. 
666.     magma = std::make_unique<MagmaMemoryTrackingProxy>(configuration.magmaCfg);
                 ^
667. 
668.     setMaxDataSize(configuration.getBucketQuota());

kv_engine/engines/ep/src/kvstore/magma-kvstore/magma-kvstore.cc:666:13: call to std::make_unique<ca2ec7ba8bc0afba>
664.     configuration.magmaCfg.UID = loggerName;
665. 
666.     magma = std::make_unique<MagmaMemoryTrackingProxy>(configuration.magmaCfg);
                 ^
667. 
668.     setMaxDataSize(configuration.getBucketQuota());

/Users/dave/repos/facebook/infer/facebook-clang-plugins/clang/install/include/c++/v1/memory:2094:32: call to MagmaMemoryTrackingProxy::MagmaMemoryTrackingProxy
  2092. make_unique(_Args&&... __args)
  2093. {
  2094.     return unique_ptr<_Tp>(new _Tp(_VSTD::forward<_Args>(__args)...));
                                       ^
  2095. }
  2096. 

kv_engine/engines/ep/src/kvstore/magma-kvstore/magma-memory-tracking-proxy.cc:103:13: call to std::make_unique<magma::Magma,_magma::Magma::Config_&>
    101.         magma::Magma::Config& config) {
    102.     cb::UseArenaMallocSecondaryDomain domainGuard;
    103.     magma = std::make_unique<magma::Magma>(config);
                     ^
    104. }
    105. 

/Users/dave/repos/facebook/infer/facebook-clang-plugins/clang/install/include/c++/v1/memory:2094:32: call to magma::Magma::Magma
      2092. make_unique(_Args&&... __args)
      2093. {
      2094.     return unique_ptr<_Tp>(new _Tp(_VSTD::forward<_Args>(__args)...));
                                           ^
      2095. }
      2096. 

magma/magma/db.cc:119:16: call to magma::Magma::Impl::Impl
        117. 
        118. Magma::Magma(Config& config) {
        119.     impl = new Impl(config);
                            ^
        120. }
        121. 

magma/magma/db.cc:48:5: call to magma::ExecutionEnvRegistry::Init
          46. 
          47. Magma::Impl::Impl(Config& config) : cfg(config), kvstores(cfg) {
          48.     ExecutionEnvRegistry::Init(cfg.SwitchExecutionEnvFunc, cfg.DefaultEnv);
                  ^
          49.     // Disable CheckpointOnShutdown in readonly mode
          50.     if (cfg.ReadOnly) {

magma/util/execution_env.cc:34:9: call to std::pair<void*,int>::operator=
            32.     if (!initialized) {
            33.         ExecutionEnvRegistry::switchExecutionEnvFunc = switchEnvFunction;
            34.         ExecutionEnvRegistry::defaultEnv = defaultEnvironment;
                        ^
            35.         initialized = true;
            36.     }

/Users/dave/repos/facebook/infer/facebook-clang-plugins/clang/install/include/c++/v1/utility:519:9: access to `magma::ExecutionEnvRegistry::defaultEnv.first`
              517.                    is_nothrow_copy_assignable<second_type>::value)
              518.     {
              519.         first = __p.first;
                           ^
              520.         second = __p.second;
              521.         return *this;
