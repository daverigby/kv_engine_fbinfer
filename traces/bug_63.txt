#63
kv_engine/engines/ep/src/checkpoint_manager.h:338: warning: Lock Consistency Violation
  Read/Write race. Non-private method `CheckpointManager::getItemsForPersistence` reads without synchronization from `this->persistenceCursor`. Potentially races with write in method `CheckpointManager::resetPersistenceCursor`.

kv_engine/engines/ep/src/checkpoint_manager.h:338:16: <Read trace>
336.     ItemsForCursor getItemsForPersistence(std::vector<queued_item>& items,
337.                                           size_t approxLimit) {
338.         return getItemsForCursor(persistenceCursor, items, approxLimit);
                    ^
339.     }
340. 

kv_engine/engines/ep/src/checkpoint_manager.h:338:16: access to `this->persistenceCursor`
336.     ItemsForCursor getItemsForPersistence(std::vector<queued_item>& items,
337.                                           size_t approxLimit) {
338.         return getItemsForCursor(persistenceCursor, items, approxLimit);
                    ^
339.     }
340. 

kv_engine/engines/ep/src/checkpoint_manager.cc:405:5: <Write trace>
403.     Expects(remResult);
404.     pCursor = Cursor();
405.     persistenceCursor = nullptr;
         ^
406. 
407.     // 2) Make the new pcursor from the backup copy, assign the correct name

kv_engine/engines/ep/src/checkpoint_manager.cc:405:5: access to `this->persistenceCursor`
403.     Expects(remResult);
404.     pCursor = Cursor();
405.     persistenceCursor = nullptr;
         ^
406. 
407.     // 2) Make the new pcursor from the backup copy, assign the correct name
