#154
kv_engine/engines/ep/src/vbucket.cc:1845: warning: Lock Consistency Violation
  Read/Write race. Non-private method `VBucket::updateFromManifest` indirectly reads without synchronization from `folly::AccessSpreader<std::atomic>::cpuCache.cachedCpuUses_`. Potentially races with write in method `VBucket::add`.

kv_engine/engines/ep/src/vbucket.cc:1845:12: <Read trace>
1843. Collections::VB::ManifestUpdateStatus VBucket::updateFromManifest(
1844.         const Collections::Manifest& m) {
1845.     return manifest->update(*this, m);
                 ^
1846. }
1847. 

kv_engine/engines/ep/src/vbucket.cc:1845:12: call to Collections::VB::Manifest::update
1843. Collections::VB::ManifestUpdateStatus VBucket::updateFromManifest(
1844.         const Collections::Manifest& m) {
1845.     return manifest->update(*this, m);
                 ^
1846. }
1847. 

kv_engine/engines/ep/src/collections/vbucket_manifest.cc:262:5: call to Collections::VB::Manifest::completeUpdate
  260.     }
  261. 
  262.     completeUpdate(std::move(upgradeLock), vb, changes);
           ^
  263.     return ManifestUpdateStatus::Success;
  264. }

kv_engine/engines/ep/src/collections/vbucket_manifest.cc:327:26: call to Collections::VB::Manifest::applyDrops
    325.     }
    326. 
    327.     auto finalDeletion = applyDrops(wHandle, vb, changeset.collectionsToDrop);
                                  ^
    328.     if (finalDeletion) {
    329.         // if the changeset is now 'drained' of create/drop, then this is final

kv_engine/engines/ep/src/collections/vbucket_manifest.cc:141:9: call to Collections::VB::Manifest::dropCollection
      139.     }
      140.     for (CollectionID cid : changes) {
      141.         dropCollection(
                   ^
      142.                 wHandle, vb, manifestUid, cid, OptionalSeqno{/*no-seqno*/});
      143.     }

kv_engine/engines/ep/src/collections/vbucket_manifest.cc:548:18: call to Collections::VB::Manifest::queueCollectionSystemEvent
        546.     updateUid(newManUid, optionalSeqno.has_value());
        547. 
        548.     auto seqno = queueCollectionSystemEvent(
                              ^
        549.             wHandle,
        550.             vb,

kv_engine/engines/ep/src/collections/vbucket_manifest.cc:922:17: call to Collections::VB::Manifest::makeCollectionSystemEvent
          920.     }
          921. 
          922.     auto item = makeCollectionSystemEvent(
                               ^
          923.             getManifestUid(), cid, collectionName, entry, deleted, seq);
          924. 

kv_engine/engines/ep/src/collections/vbucket_manifest.cc:898:17: call to SystemEventFactory::makeCollectionEvent
            896.     }
            897. 
            898.     auto item = SystemEventFactory::makeCollectionEvent(
                                 ^
            899.             cid, {builder.GetBufferPointer(), builder.GetSize()}, seq);
            900. 

kv_engine/engines/ep/src/systemevent_factory.cc:42:12: call to SystemEventFactory::make
              40. std::unique_ptr<Item> SystemEventFactory::makeCollectionEvent(
              41.         CollectionID cid, cb::const_byte_buffer data, OptionalSeqno seqno) {
              42.     return make(
                             ^
              43.             makeCollectionEventKey(cid), SystemEvent::Collection, data, seqno);
              44. }

kv_engine/engines/ep/src/systemevent_factory.cc:27:17: call to std::make_unique<86e9fce1fe88f66c>
                25.                                                cb::const_byte_buffer data,
                26.                                                OptionalSeqno seqno) {
                27.     auto item = std::make_unique<Item>(key,
                                    ^
                28.                                        uint32_t(se) /*flags*/,
                29.                                        0 /*exptime*/,

/Users/dave/repos/facebook/infer/facebook-clang-plugins/clang/install/include/c++/v1/memory:2094:32: call to Item::Item
                  2092. make_unique(_Args&&... __args)
                  2093. {
                  2094.     return unique_ptr<_Tp>(new _Tp(_VSTD::forward<_Args>(__args)...));
                                                       ^
                  2095. }
                  2096. 

kv_engine/engines/ep/src/item.cc:80:5: call to Item::setData
                    78.         throw std::invalid_argument("Item(): bySeqno must be non-zero");
                    79.     }
                    80.     setData(static_cast<const char*>(dta), nb);
                            ^
                    81.     setFreqCounterValue(freqCount);
                    82.     ObjectRegistry::onCreateItem(this);

kv_engine/engines/ep/src/item.h:606:20: call to Blob::New
                      604.         Blob *data;
                      605.         if (dta == nullptr) {
                      606.             data = Blob::New(nb);
                                              ^
                      607.         } else {
                      608.             data = Blob::New(dta, nb);

kv_engine/engines/ep/src/blob.cc:26:47: call to Blob::Blob
                        24. Blob* Blob::New(const size_t len) {
                        25.     size_t total_len = getAllocationSize(len);
                        26.     Blob* t = new (::operator new(total_len)) Blob(len);
                                                                          ^
                        27.     return t;
                        28. }

kv_engine/engines/ep/src/blob.cc:48:32: call to Blob::Blob
                          46. }
                          47. 
                          48. Blob::Blob(const size_t len) : Blob(nullptr, len) {
                                                             ^
                          49. }
                          50. 

kv_engine/engines/ep/src/blob.cc:45:5: call to ObjectRegistry::onCreateBlob
                            43. #endif
                            44.     }
                            45.     ObjectRegistry::onCreateBlob(this);
                                    ^
                            46. }
                            47. 

kv_engine/engines/ep/src/objectregistry.cc:36:32: call to CoreStore<folly::aligned<CoreLocalStats,16>,Opaque,Opaque>::get
                              34.     EventuallyPersistentEngine* engine = th;
                              35.     if (verifyEngine(engine)) {
                              36.         auto& coreLocalStats = engine->getEpStats().coreLocal.get();
                                                                 ^
                              37. 
                              38.         size_t size = cb::ArenaMalloc::malloc_usable_size(blob);

platform/include/platform/corestore.h:52:29: call to cb::stripe_for_current_cpu
                                50. 
                                51.     T& get() {
                                52.         return coreArray.at(IndexFn(coreArray.size()));
                                                                ^
                                53.     }
                                54. 

platform/src/sysinfo.cc:110:12: call to folly::AccessSpreader<Opaque>::cachedCurrent
                                  108. 
                                  109. size_t cb::stripe_for_current_cpu(size_t numStripes) {
                                  110.     return folly::AccessSpreader<std::atomic>::cachedCurrent(numStripes);
                                                  ^
                                  111. }
                                  112. 

build-debug-x64/tlm/deps/folly.exploded/include/folly/concurrency/CacheLocality.h:269:32: call to folly::AccessSpreader<std::atomic>::CpuCache::cpu
                                    267.   static size_t cachedCurrent(size_t numStripes) {
                                    268.     return widthAndCpuToStripe[std::min(size_t(kMaxCpus), numStripes)]
                                    269.                               [cpuCache.cpu()];
                                                                        ^
                                    270.   }
                                    271. #else

build-debug-x64/tlm/deps/folly.exploded/include/folly/concurrency/CacheLocality.h:319:11: access to `folly::AccessSpreader<std::atomic>::cpuCache.cachedCpuUses_`
                                      317.    public:
                                      318.     unsigned cpu() {
                                      319.       if (UNLIKELY(cachedCpuUses_-- == 0)) {
                                                     ^
                                      320.         unsigned cpu;
                                      321.         AccessSpreader::getcpuFunc(&cpu, nullptr, nullptr);

kv_engine/engines/ep/src/vbucket.cc:2616:17: <Write trace>
2614.         std::optional<VBNotifyCtx> notifyCtx;
2615.         std::tie(status, notifyCtx) =
2616.                 processAdd(htRes, v, itm, maybeKeyExists, queueItmCtx, cHandle);
                      ^
2617. 
2618.         switch (status) {

kv_engine/engines/ep/src/vbucket.cc:2616:17: call to VBucket::processAdd
2614.         std::optional<VBNotifyCtx> notifyCtx;
2615.         std::tie(status, notifyCtx) =
2616.                 processAdd(htRes, v, itm, maybeKeyExists, queueItmCtx, cHandle);
                      ^
2617. 
2618.         switch (status) {

kv_engine/engines/ep/src/vbucket.cc:3613:17: call to HashTable::unlocked_addNewStoredValue
  3611.             /* A 'temp initial item' is just added to the hash table. It is
  3612.              not put on checkpoint manager or sequence list */
  3613.             v = ht.unlocked_addNewStoredValue(htRes.getHBL(), itm);
                        ^
  3614.             updateRevSeqNoOfNewStoredValue(*v);
  3615.         } else {

kv_engine/engines/ep/src/hash_table.cc:523:5: call to HashTable::Statistics::epilogue
    521.     auto v = (*valFact)(itm, std::move(values[hbl.getBucketNum()]));
    522. 
    523.     valueStats.epilogue(emptyProperties, v.get().get());
             ^
    524. 
    525.     values[hbl.getBucketNum()] = std::move(v);

kv_engine/engines/ep/src/hash_table.cc:704:19: call to CoreStore<HashTable::Statistics::CacheLocalStatistics,Opaque,Opaque>::get
      702.     const auto post = StoredValueProperties(v);
      703. 
      704.     auto& local = llcLocal.get();
                             ^
      705. 
      706.     // Update size, metadataSize & uncompressed size if pre/post differ.

platform/include/platform/corestore.h:52:29: call to cb::stripe_for_current_cpu
        50. 
        51.     T& get() {
        52.         return coreArray.at(IndexFn(coreArray.size()));
                                        ^
        53.     }
        54. 

platform/src/sysinfo.cc:110:12: call to folly::AccessSpreader<Opaque>::cachedCurrent
          108. 
          109. size_t cb::stripe_for_current_cpu(size_t numStripes) {
          110.     return folly::AccessSpreader<std::atomic>::cachedCurrent(numStripes);
                          ^
          111. }
          112. 

build-debug-x64/tlm/deps/folly.exploded/include/folly/concurrency/CacheLocality.h:269:32: call to folly::AccessSpreader<std::atomic>::CpuCache::cpu
            267.   static size_t cachedCurrent(size_t numStripes) {
            268.     return widthAndCpuToStripe[std::min(size_t(kMaxCpus), numStripes)]
            269.                               [cpuCache.cpu()];
                                                ^
            270.   }
            271. #else

build-debug-x64/tlm/deps/folly.exploded/include/folly/concurrency/CacheLocality.h:319:11: access to `folly::AccessSpreader<std::atomic>::cpuCache.cachedCpuUses_`
              317.    public:
              318.     unsigned cpu() {
              319.       if (UNLIKELY(cachedCpuUses_-- == 0)) {
                             ^
              320.         unsigned cpu;
              321.         AccessSpreader::getcpuFunc(&cpu, nullptr, nullptr);
