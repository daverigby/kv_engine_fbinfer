#137
kv_engine/engines/ep/src/kvstore/magma-kvstore/magma-kvstore.cc:3348: warning: Lock Consistency Violation
  Read/Write race. Non-private method `MagmaKVStore::setStorageThreads` indirectly reads without synchronization from `magma::ExecutionEnvRegistry::defaultEnv.first`. Potentially races with write in method `MagmaKVStore::MagmaKVStore`.

kv_engine/engines/ep/src/kvstore/magma-kvstore/magma-kvstore.cc:3348:5: <Read trace>
3346. 
3347. void MagmaKVStore::setStorageThreads(ThreadPoolConfig::StorageThreadCount num) {
3348.     configuration.setStorageThreads(num);
          ^
3349.     calculateAndSetMagmaThreads();
3350. }

kv_engine/engines/ep/src/kvstore/magma-kvstore/magma-kvstore.cc:3348:5: call to MagmaKVStoreConfig::setStorageThreads
3346. 
3347. void MagmaKVStore::setStorageThreads(ThreadPoolConfig::StorageThreadCount num) {
3348.     configuration.setStorageThreads(num);
          ^
3349.     calculateAndSetMagmaThreads();
3350. }

kv_engine/engines/ep/src/kvstore/magma-kvstore/magma-kvstore_config.cc:155:9: call to MagmaKVStore::calculateAndSetMagmaThreads
  153.     storageThreads.store(value);
  154.     if (store) {
  155.         store->calculateAndSetMagmaThreads();
               ^
  156.     }
  157. }

kv_engine/engines/ep/src/kvstore/magma-kvstore/magma-kvstore.cc:3395:5: call to MagmaMemoryTrackingProxy::SetNumThreads
    3393.             compactors);
    3394. 
    3395.     magma->SetNumThreads(Magma::ThreadType::Flusher, flushers);
              ^
    3396.     magma->SetNumThreads(Magma::ThreadType::Compactor, compactors);
    3397. }

kv_engine/engines/ep/src/kvstore/magma-kvstore/magma-memory-tracking-proxy.cc:374:5: call to magma::Magma::SetNumThreads
      372.         magma::Magma::ThreadType threadType, size_t nThreads) {
      373.     cb::UseArenaMallocSecondaryDomain domainGuard;
      374.     magma->SetNumThreads(threadType, nThreads);
               ^
      375. }
      376. 

magma/magma/db.cc:1330:12: call to magma::Magma::Impl::SetNumThreads
        1328. 
        1329. void Magma::SetNumThreads(Magma::ThreadType threadType, size_t nThreads) {
        1330.     return impl->SetNumThreads(threadType, nThreads);
                         ^
        1331. }
        1332. 

magma/magma/db.cc:1324:5: call to magma::Logger::Log<unsigned_long,_const_char_*>
          1322.     }
          1323. 
          1324.     LOG_INFO("Magma::SetNumThreads nThreads:{} type:{}",
                    ^
          1325.              nThreads,
          1326.              (threadType == Flusher ? "Flusher" : "Compactor"));

magma/util/logging.h:39:17: call to magma::ExecutionEnvRegistry::GetDefaultExecutionEnv
            37.              const Args&... args) {
            38.         ExecutionEnvGuard envGuard(
            39.                 ExecutionEnvRegistry::GetDefaultExecutionEnv());
                                ^
            40.         if (!prefix.empty()) {
            41.             std::string fmtStr = "[" + prefix + "]" + fmt;

magma/util/execution_env.cc:48:12: call to std::pair<void*,int>::pair
              46. 
              47. Magma::ExecutionEnvironment ExecutionEnvRegistry::GetDefaultExecutionEnv() {
              48.     return defaultEnv;
                             ^
              49. }
              50. 

/Users/dave/repos/facebook/infer/facebook-clang-plugins/clang/install/include/c++/v1/utility:309:5: access to `magma::ExecutionEnvRegistry::defaultEnv.first`
                307. 
                308. #if !defined(_LIBCPP_CXX03_LANG)
                309.     pair(pair const&) = default;
                         ^
                310.     pair(pair&&) = default;
                311. #else

kv_engine/engines/ep/src/kvstore/magma-kvstore/magma-kvstore.cc:666:13: <Write trace>
664.     configuration.magmaCfg.UID = loggerName;
665. 
666.     magma = std::make_unique<MagmaMemoryTrackingProxy>(configuration.magmaCfg);
                 ^
667. 
668.     setMaxDataSize(configuration.getBucketQuota());

kv_engine/engines/ep/src/kvstore/magma-kvstore/magma-kvstore.cc:666:13: call to std::make_unique<ca2ec7ba8bc0afba>
664.     configuration.magmaCfg.UID = loggerName;
665. 
666.     magma = std::make_unique<MagmaMemoryTrackingProxy>(configuration.magmaCfg);
                 ^
667. 
668.     setMaxDataSize(configuration.getBucketQuota());

/Users/dave/repos/facebook/infer/facebook-clang-plugins/clang/install/include/c++/v1/memory:2094:32: call to MagmaMemoryTrackingProxy::MagmaMemoryTrackingProxy
  2092. make_unique(_Args&&... __args)
  2093. {
  2094.     return unique_ptr<_Tp>(new _Tp(_VSTD::forward<_Args>(__args)...));
                                       ^
  2095. }
  2096. 

kv_engine/engines/ep/src/kvstore/magma-kvstore/magma-memory-tracking-proxy.cc:103:13: call to std::make_unique<magma::Magma,_magma::Magma::Config_&>
    101.         magma::Magma::Config& config) {
    102.     cb::UseArenaMallocSecondaryDomain domainGuard;
    103.     magma = std::make_unique<magma::Magma>(config);
                     ^
    104. }
    105. 

/Users/dave/repos/facebook/infer/facebook-clang-plugins/clang/install/include/c++/v1/memory:2094:32: call to magma::Magma::Magma
      2092. make_unique(_Args&&... __args)
      2093. {
      2094.     return unique_ptr<_Tp>(new _Tp(_VSTD::forward<_Args>(__args)...));
                                           ^
      2095. }
      2096. 

magma/magma/db.cc:119:16: call to magma::Magma::Impl::Impl
        117. 
        118. Magma::Magma(Config& config) {
        119.     impl = new Impl(config);
                            ^
        120. }
        121. 

magma/magma/db.cc:48:5: call to magma::ExecutionEnvRegistry::Init
          46. 
          47. Magma::Impl::Impl(Config& config) : cfg(config), kvstores(cfg) {
          48.     ExecutionEnvRegistry::Init(cfg.SwitchExecutionEnvFunc, cfg.DefaultEnv);
                  ^
          49.     // Disable CheckpointOnShutdown in readonly mode
          50.     if (cfg.ReadOnly) {

magma/util/execution_env.cc:34:9: call to std::pair<void*,int>::operator=
            32.     if (!initialized) {
            33.         ExecutionEnvRegistry::switchExecutionEnvFunc = switchEnvFunction;
            34.         ExecutionEnvRegistry::defaultEnv = defaultEnvironment;
                        ^
            35.         initialized = true;
            36.     }

/Users/dave/repos/facebook/infer/facebook-clang-plugins/clang/install/include/c++/v1/utility:519:9: access to `magma::ExecutionEnvRegistry::defaultEnv.first`
              517.                    is_nothrow_copy_assignable<second_type>::value)
              518.     {
              519.         first = __p.first;
                           ^
              520.         second = __p.second;
              521.         return *this;
