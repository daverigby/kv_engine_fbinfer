#85
kv_engine/engines/ep/src/dcp/consumer.cc:1590: warning: Lock Consistency Violation
  Read/Write race. Non-private method `DcpConsumer::enableExpiryOpcode` reads without synchronization from `this->opaqueCounter`. Potentially races with write in method `DcpConsumer::addStream`.

kv_engine/engines/ep/src/dcp/consumer.cc:1590:27: <Read trace>
1588.         DcpMessageProducersIface& producers) {
1589.     if (pendingEnableExpiryOpcode) {
1590.         uint32_t opaque = ++opaqueCounter;
                                ^
1591.         std::string val("true");
1592.         cb::engine_errc ret =

kv_engine/engines/ep/src/dcp/consumer.cc:1590:27: access to `this->opaqueCounter`
1588.         DcpMessageProducersIface& producers) {
1589.     if (pendingEnableExpiryOpcode) {
1590.         uint32_t opaque = ++opaqueCounter;
                                ^
1591.         std::string val("true");
1592.         cb::engine_errc ret =

kv_engine/engines/ep/src/dcp/consumer.cc:285:27: <Write trace>
283.     }
284. 
285.     uint32_t new_opaque = ++opaqueCounter;
                               ^
286.     failover_entry_t entry = vb->failovers->getLatestEntry();
287.     uint64_t start_seqno = info.start;

kv_engine/engines/ep/src/dcp/consumer.cc:285:27: access to `this->opaqueCounter`
283.     }
284. 
285.     uint32_t new_opaque = ++opaqueCounter;
                               ^
286.     failover_entry_t entry = vb->failovers->getLatestEntry();
287.     uint64_t start_seqno = info.start;
