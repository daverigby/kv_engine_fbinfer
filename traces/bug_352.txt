#352
phosphor/src/trace_log.cc:145: warning: Lock Consistency Violation
  Read/Write race. Non-private method `phosphor::TraceLog::logEvent` indirectly reads without synchronization from `phosphor::thread_chunk.chunk`. Potentially races with write in method `phosphor::TraceLog::deregisterThread`.

phosphor/src/trace_log.cc:145:19: <Read trace>
143.             return;
144.         }
145.         auto cl = getChunkTenant();
                       ^
146.         if (cl) {
147.             cl.mutex()->chunk->addEvent() = TraceEvent(

phosphor/src/trace_log.cc:145:19: call to phosphor::TraceLog::getChunkTenant
143.             return;
144.         }
145.         auto cl = getChunkTenant();
                       ^
146.         if (cl) {
147.             cl.mutex()->chunk->addEvent() = TraceEvent(

phosphor/src/trace_log.cc:290:14: access to `phosphor::thread_chunk.chunk`
  288.         }
  289. 
  290.         if (!thread_chunk.chunk || thread_chunk.chunk->isFull()) {
                    ^
  291.             // If we're missing our chunk then it might be because we're
  292.             // meant to be stopping right now.

phosphor/src/trace_log.cc:228:13: <Write trace>
226.                 buffer->returnChunk(*thread_chunk.chunk);
227.             }
228.             thread_chunk.chunk = nullptr;
                 ^
229.         }
230.         registered_chunk_tenants.erase(&thread_chunk);

phosphor/src/trace_log.cc:228:13: access to `phosphor::thread_chunk.chunk`
226.                 buffer->returnChunk(*thread_chunk.chunk);
227.             }
228.             thread_chunk.chunk = nullptr;
                 ^
229.         }
230.         registered_chunk_tenants.erase(&thread_chunk);
