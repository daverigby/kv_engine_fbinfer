#36
kv_engine/engines/ep/src/checkpoint_manager.cc:240: warning: Lock Consistency Violation
  Read/Write race. Non-private method `CheckpointManager::addOpenCheckpoint` indirectly reads without synchronization from `this->lastBySeqno.val`. Potentially races with write in method `CheckpointManager::clear`.

kv_engine/engines/ep/src/checkpoint_manager.cc:240:22: <Read trace>
238.     // at creation. So, the cursor will point at the first actual non-meta item
239.     // after the first cursor-increment.
240.     queued_item qi = createCheckpointItem(0, Vbid(0xffff), queue_op::empty);
                          ^
241.     ckpt->queueDirty(qi);
242.     // Note: We don't include the empty-item in 'numItems'

kv_engine/engines/ep/src/checkpoint_manager.cc:240:22: call to CheckpointManager::createCheckpointItem
238.     // at creation. So, the cursor will point at the first actual non-meta item
239.     // after the first cursor-increment.
240.     queued_item qi = createCheckpointItem(0, Vbid(0xffff), queue_op::empty);
                          ^
241.     ckpt->queueDirty(qi);
242.     // Note: We don't include the empty-item in 'numItems'

kv_engine/engines/ep/src/checkpoint_manager.cc:1375:24: call to Monotonic<long long,Opaque,Opaque>::operator_long_long
  1373.     // whilst checkpoint starts should be inclusive. Checkpoint ends may share a
  1374.     // seqno with a preceding setVBucketState though.
  1375.     uint64_t bySeqno = lastBySeqno + 1;
                               ^
  1376.     StoredDocKey key(to_string(checkpoint_op), CollectionID::System);
  1377. 

platform/include/platform/monotonic.h:126:16: call to Monotonic<long long,Opaque,Opaque>::load
    124.     // NOLINTNEXTLINE(google-explicit-constructor)
    125.     operator T() const noexcept {
    126.         return load();
                        ^
    127.     }
    128. 

platform/include/platform/monotonic.h:130:9: access to `this->lastBySeqno.val`
      128. 
      129.     [[nodiscard]] T load() const noexcept {
      130.         return val;
                   ^
      131.     }
      132. 

kv_engine/engines/ep/src/checkpoint_manager.cc:1252:5: <Write trace>
1250. void CheckpointManager::clear(std::optional<uint64_t> seqno) {
1251.     std::lock_guard<std::mutex> lh(queueLock);
1252.     clear(lh, seqno ? *seqno : lastBySeqno);
          ^
1253. }
1254. 

kv_engine/engines/ep/src/checkpoint_manager.cc:1252:5: call to CheckpointManager::clear
1250. void CheckpointManager::clear(std::optional<uint64_t> seqno) {
1251.     std::lock_guard<std::mutex> lh(queueLock);
1252.     clear(lh, seqno ? *seqno : lastBySeqno);
          ^
1253. }
1254. 

kv_engine/engines/ep/src/checkpoint_manager.cc:1131:5: call to Monotonic<long long,Opaque,Opaque>::reset
  1129. 
  1130.     numItems = 0;
  1131.     lastBySeqno.reset(seqno);
            ^
  1132.     maxVisibleSeqno.reset(seqno);
  1133. 

platform/include/platform/monotonic.h:150:9: access to `this->lastBySeqno.val`
    148.     /* Can be used to lower the value */
    149.     void reset(T desired) {
    150.         val = desired;
                 ^
    151.     }
    152. 
