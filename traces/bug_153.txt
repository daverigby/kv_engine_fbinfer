#153
kv_engine/engines/ep/src/vbucket.cc:1403: warning: Lock Consistency Violation
  Read/Write race. Non-private method `VBucket::createNewAbortedItem` indirectly reads without synchronization from `folly::AccessSpreader<std::atomic>::cpuCache.cachedCpuUses_`. Potentially races with write in method `VBucket::add`.

kv_engine/engines/ep/src/vbucket.cc:1403:17: <Read trace>
1401.                                           int64_t prepareSeqno,
1402.                                           int64_t abortSeqno) {
1403.     auto item = make_STRCPtr<Item>(key,
                      ^
1404.                                    0 /*flags*/,
1405.                                    ep_real_time() /*exp*/,

kv_engine/engines/ep/src/vbucket.cc:1403:17: call to make_STRCPtr<7f74c2a3be647f46>
1401.                                           int64_t prepareSeqno,
1402.                                           int64_t abortSeqno) {
1403.     auto item = make_STRCPtr<Item>(key,
                      ^
1404.                                    0 /*flags*/,
1405.                                    ep_real_time() /*exp*/,

platform/include/platform/atomic.h:317:17: call to Item::Item
  315. SingleThreadedRCPtr<T, Pointer, Deleter> make_STRCPtr(Args&&... args) {
  316.     return SingleThreadedRCPtr<T, Pointer, Deleter>(
  317.             new T(std::forward<Args>(args)...));
                       ^
  318. }
  319. 

kv_engine/engines/ep/src/item.cc:52:5: call to ObjectRegistry::onCreateItem
    50.     }
    51. 
    52.     ObjectRegistry::onCreateItem(this);
            ^
    53. }
    54. 

kv_engine/engines/ep/src/objectregistry.cc:84:32: call to CoreStore<folly::aligned<CoreLocalStats,16>,Opaque,Opaque>::get
      82.     EventuallyPersistentEngine* engine = th;
      83.     if (verifyEngine(engine)) {
      84.         auto& coreLocalStats = engine->getEpStats().coreLocal.get();
                                         ^
      85.         coreLocalStats->memOverhead.fetch_add(pItem->size() -
      86.                                               pItem->getValMemSize());

platform/include/platform/corestore.h:52:29: call to cb::stripe_for_current_cpu
        50. 
        51.     T& get() {
        52.         return coreArray.at(IndexFn(coreArray.size()));
                                        ^
        53.     }
        54. 

platform/src/sysinfo.cc:110:12: call to folly::AccessSpreader<Opaque>::cachedCurrent
          108. 
          109. size_t cb::stripe_for_current_cpu(size_t numStripes) {
          110.     return folly::AccessSpreader<std::atomic>::cachedCurrent(numStripes);
                          ^
          111. }
          112. 

build-debug-x64/tlm/deps/folly.exploded/include/folly/concurrency/CacheLocality.h:269:32: call to folly::AccessSpreader<std::atomic>::CpuCache::cpu
            267.   static size_t cachedCurrent(size_t numStripes) {
            268.     return widthAndCpuToStripe[std::min(size_t(kMaxCpus), numStripes)]
            269.                               [cpuCache.cpu()];
                                                ^
            270.   }
            271. #else

build-debug-x64/tlm/deps/folly.exploded/include/folly/concurrency/CacheLocality.h:319:11: access to `folly::AccessSpreader<std::atomic>::cpuCache.cachedCpuUses_`
              317.    public:
              318.     unsigned cpu() {
              319.       if (UNLIKELY(cachedCpuUses_-- == 0)) {
                             ^
              320.         unsigned cpu;
              321.         AccessSpreader::getcpuFunc(&cpu, nullptr, nullptr);

kv_engine/engines/ep/src/vbucket.cc:2616:17: <Write trace>
2614.         std::optional<VBNotifyCtx> notifyCtx;
2615.         std::tie(status, notifyCtx) =
2616.                 processAdd(htRes, v, itm, maybeKeyExists, queueItmCtx, cHandle);
                      ^
2617. 
2618.         switch (status) {

kv_engine/engines/ep/src/vbucket.cc:2616:17: call to VBucket::processAdd
2614.         std::optional<VBNotifyCtx> notifyCtx;
2615.         std::tie(status, notifyCtx) =
2616.                 processAdd(htRes, v, itm, maybeKeyExists, queueItmCtx, cHandle);
                      ^
2617. 
2618.         switch (status) {

kv_engine/engines/ep/src/vbucket.cc:3613:17: call to HashTable::unlocked_addNewStoredValue
  3611.             /* A 'temp initial item' is just added to the hash table. It is
  3612.              not put on checkpoint manager or sequence list */
  3613.             v = ht.unlocked_addNewStoredValue(htRes.getHBL(), itm);
                        ^
  3614.             updateRevSeqNoOfNewStoredValue(*v);
  3615.         } else {

kv_engine/engines/ep/src/hash_table.cc:523:5: call to HashTable::Statistics::epilogue
    521.     auto v = (*valFact)(itm, std::move(values[hbl.getBucketNum()]));
    522. 
    523.     valueStats.epilogue(emptyProperties, v.get().get());
             ^
    524. 
    525.     values[hbl.getBucketNum()] = std::move(v);

kv_engine/engines/ep/src/hash_table.cc:704:19: call to CoreStore<HashTable::Statistics::CacheLocalStatistics,Opaque,Opaque>::get
      702.     const auto post = StoredValueProperties(v);
      703. 
      704.     auto& local = llcLocal.get();
                             ^
      705. 
      706.     // Update size, metadataSize & uncompressed size if pre/post differ.

platform/include/platform/corestore.h:52:29: call to cb::stripe_for_current_cpu
        50. 
        51.     T& get() {
        52.         return coreArray.at(IndexFn(coreArray.size()));
                                        ^
        53.     }
        54. 

platform/src/sysinfo.cc:110:12: call to folly::AccessSpreader<Opaque>::cachedCurrent
          108. 
          109. size_t cb::stripe_for_current_cpu(size_t numStripes) {
          110.     return folly::AccessSpreader<std::atomic>::cachedCurrent(numStripes);
                          ^
          111. }
          112. 

build-debug-x64/tlm/deps/folly.exploded/include/folly/concurrency/CacheLocality.h:269:32: call to folly::AccessSpreader<std::atomic>::CpuCache::cpu
            267.   static size_t cachedCurrent(size_t numStripes) {
            268.     return widthAndCpuToStripe[std::min(size_t(kMaxCpus), numStripes)]
            269.                               [cpuCache.cpu()];
                                                ^
            270.   }
            271. #else

build-debug-x64/tlm/deps/folly.exploded/include/folly/concurrency/CacheLocality.h:319:11: access to `folly::AccessSpreader<std::atomic>::cpuCache.cachedCpuUses_`
              317.    public:
              318.     unsigned cpu() {
              319.       if (UNLIKELY(cachedCpuUses_-- == 0)) {
                             ^
              320.         unsigned cpu;
              321.         AccessSpreader::getcpuFunc(&cpu, nullptr, nullptr);
