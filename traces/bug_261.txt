#261
kv_engine/engines/ep/tests/module_tests/dcp_stream_ephemeral_test.cc:136: error: Null Dereference
  pointer `vb` last assigned on line 135 could be null and is dereferenced at line 136, column 5.

kv_engine/engines/ep/tests/module_tests/dcp_stream_ephemeral_test.cc:130:1: start of procedure TestBody
128.  * where the stale item is at RangeItr::begin. Test for Normal writes.
129.  */
130. TEST_P(STActiveStreamEphemeralTest, MB_43847_NormalWrite) {
     ^
131.     // We need to re-create the stream in a condition that triggers a backfill
132.     stream.reset();

kv_engine/engines/ep/tests/module_tests/dcp_stream_ephemeral_test.cc:132:5: 
130. TEST_P(STActiveStreamEphemeralTest, MB_43847_NormalWrite) {
131.     // We need to re-create the stream in a condition that triggers a backfill
132.     stream.reset();
         ^
133.     producer.reset();
134. 

kv_engine/engines/ep/tests/module_tests/dcp_stream_ephemeral_test.cc:133:5: 
131.     // We need to re-create the stream in a condition that triggers a backfill
132.     stream.reset();
133.     producer.reset();
         ^
134. 
135.     auto& vb = dynamic_cast<EphemeralVBucket&>(*store->getVBucket(vbid));

kv_engine/engines/ep/tests/module_tests/dcp_stream_ephemeral_test.cc:135:5: 
133.     producer.reset();
134. 
135.     auto& vb = dynamic_cast<EphemeralVBucket&>(*store->getVBucket(vbid));
         ^
136.     ASSERT_EQ(0, vb.getHighSeqno());
137.     auto& manager = *vb.checkpointManager;

kv_engine/engines/ep/tests/module_tests/dcp_stream_ephemeral_test.cc:135:49: 
133.     producer.reset();
134. 
135.     auto& vb = dynamic_cast<EphemeralVBucket&>(*store->getVBucket(vbid));
                                                     ^
136.     ASSERT_EQ(0, vb.getHighSeqno());
137.     auto& manager = *vb.checkpointManager;

kv_engine/include/memcached/vbucket.h:52:7: start of procedure Vbid
  50.  * output formatting, wrapping it with "vb:"
  51.  */
  52. class Vbid {
            ^
  53. public:
  54.     using id_type = uint16_t;

kv_engine/include/memcached/vbucket.h:52:7: return from a call to Vbid::Vbid
  50.  * output formatting, wrapping it with "vb:"
  51.  */
  52. class Vbid {
            ^
  53. public:
  54.     using id_type = uint16_t;

kv_engine/engines/ep/src/kv_bucket.h:243:5: start of procedure getVBucket
  241.     }
  242. 
  243.     VBucketPtr getVBucket(Vbid vbid) override {
           ^
  244.         return vbMap.getBucket(vbid);
  245.     }

kv_engine/engines/ep/src/kv_bucket.h:244:9: 
  242. 
  243.     VBucketPtr getVBucket(Vbid vbid) override {
  244.         return vbMap.getBucket(vbid);
               ^
  245.     }
  246. 

kv_engine/include/memcached/vbucket.h:52:7: start of procedure Vbid
    50.  * output formatting, wrapping it with "vb:"
    51.  */
    52. class Vbid {
              ^
    53. public:
    54.     using id_type = uint16_t;

kv_engine/include/memcached/vbucket.h:52:7: return from a call to Vbid::Vbid
    50.  * output formatting, wrapping it with "vb:"
    51.  */
    52. class Vbid {
              ^
    53. public:
    54.     using id_type = uint16_t;

kv_engine/engines/ep/src/vbucketmap.cc:40:1: start of procedure getBucket
    38. }
    39. 
    40. VBucketPtr VBucketMap::getBucket(Vbid id) const {
        ^
    41.     if (id.get() < size) {
    42.         return getShardByVbId(id)->getBucket(id);

kv_engine/engines/ep/src/vbucketmap.cc:41:9: 
    39. 
    40. VBucketPtr VBucketMap::getBucket(Vbid id) const {
    41.     if (id.get() < size) {
                ^
    42.         return getShardByVbId(id)->getBucket(id);
    43.     } else {

kv_engine/include/memcached/vbucket.h:61:5: start of procedure get
      59. 
      60.     // Retrieve the vBucket ID in the form of uint16_t
      61.     id_type get() const {
              ^
      62.         return vbid;
      63.     }

kv_engine/include/memcached/vbucket.h:62:9: 
      60.     // Retrieve the vBucket ID in the form of uint16_t
      61.     id_type get() const {
      62.         return vbid;
                  ^
      63.     }
      64. 

kv_engine/include/memcached/vbucket.h:63:5: return from a call to Vbid::get
      61.     id_type get() const {
      62.         return vbid;
      63.     }
              ^
      64. 
      65.     // Retrieve the vBucket ID in a printable/loggable form

kv_engine/engines/ep/src/vbucketmap.cc:41:9: Taking false branch
    39. 
    40. VBucketPtr VBucketMap::getBucket(Vbid id) const {
    41.     if (id.get() < size) {
                ^
    42.         return getShardByVbId(id)->getBucket(id);
    43.     } else {

kv_engine/engines/ep/src/vbucketmap.cc:44:9: 
    42.         return getShardByVbId(id)->getBucket(id);
    43.     } else {
    44.         return {};
                ^
    45.     }
    46. }

kv_engine/engines/ep/src/vbucketmap.cc:46:1: return from a call to VBucketMap::getBucket
    44.         return {};
    45.     }
    46. }
        ^
    47. 
    48. cb::engine_errc VBucketMap::addBucket(VBucketPtr vb) {

kv_engine/engines/ep/src/kv_bucket.h:244:9: 
  242. 
  243.     VBucketPtr getVBucket(Vbid vbid) override {
  244.         return vbMap.getBucket(vbid);
               ^
  245.     }
  246. 

kv_engine/engines/ep/src/kv_bucket.h:245:5: return from a call to KVBucket::getVBucket
  243.     VBucketPtr getVBucket(Vbid vbid) override {
  244.         return vbMap.getBucket(vbid);
  245.     }
           ^
  246. 
  247.     /**

kv_engine/engines/ep/tests/module_tests/dcp_stream_ephemeral_test.cc:135:72: 
133.     producer.reset();
134. 
135.     auto& vb = dynamic_cast<EphemeralVBucket&>(*store->getVBucket(vbid));
                                                                            ^
136.     ASSERT_EQ(0, vb.getHighSeqno());
137.     auto& manager = *vb.checkpointManager;

kv_engine/engines/ep/tests/module_tests/dcp_stream_ephemeral_test.cc:135:5: 
133.     producer.reset();
134. 
135.     auto& vb = dynamic_cast<EphemeralVBucket&>(*store->getVBucket(vbid));
         ^
136.     ASSERT_EQ(0, vb.getHighSeqno());
137.     auto& manager = *vb.checkpointManager;

kv_engine/engines/ep/tests/module_tests/dcp_stream_ephemeral_test.cc:136:5: Switch condition is true. Entering switch case
134. 
135.     auto& vb = dynamic_cast<EphemeralVBucket&>(*store->getVBucket(vbid));
136.     ASSERT_EQ(0, vb.getHighSeqno());
         ^
137.     auto& manager = *vb.checkpointManager;
138.     const auto& list =
